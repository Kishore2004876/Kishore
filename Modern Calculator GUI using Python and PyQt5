import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QGridLayout
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt


class ModernCalculator(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Modern Calculator")
        self.setFixedSize(350, 450)
        self.setStyleSheet("background-color: #1e1e1e; color: white;")
        self.init_ui()

    def init_ui(self):
        # Main layout
        layout = QVBoxLayout()
        self.display = QLineEdit()
        self.display.setFont(QFont("Consolas", 24))
        self.display.setAlignment(Qt.AlignRight)
        self.display.setStyleSheet("padding: 15px; background-color: #2d2d2d; border: none; color: white;")
        self.display.setReadOnly(True)

        layout.addWidget(self.display)

        # Button grid
        buttons = [
            ['C', '⌫', '%', '/'],
            ['7', '8', '9', '*'],
            ['4', '5', '6', '-'],
            ['1', '2', '3', '+'],
            ['00', '0', '.', '=']
        ]

        grid_layout = QGridLayout()

        for row, row_values in enumerate(buttons):
            for col, button_text in enumerate(row_values):
                button = QPushButton(button_text)
                button.setFixedSize(70, 60)
                button.setFont(QFont("Segoe UI", 16))
                button.setStyleSheet("""
                    QPushButton {
                        background-color: #3c3f41;
                        border-radius: 10px;
                    }
                    QPushButton:hover {
                        background-color: #505354;
                    }
                """)
                button.clicked.connect(self.button_clicked)
                grid_layout.addWidget(button, row, col)

        layout.addLayout(grid_layout)
        self.setLayout(layout)

    def button_clicked(self):
        button = self.sender()
        text = button.text()

        if text == 'C':
            self.display.clear()
        elif text == '⌫':
            self.display.setText(self.display.text()[:-1])
        elif text == '=':
            try:
                result = str(eval(self.display.text()))
                self.display.setText(result)
            except Exception:
                self.display.setText("Error")
        else:
            self.display.setText(self.display.text() + text)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    calculator = ModernCalculator()
    calculator.show()
    sys.exit(app.exec_())
